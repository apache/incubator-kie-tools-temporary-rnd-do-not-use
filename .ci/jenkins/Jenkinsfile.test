/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
pipeline {
    agent {
        docker {
            image 'quay.io/kie-tools/kie-tools-ci-build:latest'
            args '--runtime=sysbox-runc --shm-size=1gb --entrypoint="" --group-add docker --group-add input --group-add render'
        }
    }

    options {
        timeout(time: 600, unit: 'MINUTES')
    }

    stages {
        stage('Pre-check') {
            steps {
                sh """#!/bin/bash -el
                java --version
                mvn --version
                node --version
                go version
                pnpm --version
                """.trim()
            }
        }

        stage("Setup PNPM") {
            steps {
                sh """#!/bin/bash -el
                pnpm config set network-timeout 1000000
                pnpm -r exec 'bash' '-c' 'mkdir .mvn'
                pnpm -r exec 'bash' '-c' 'echo -B > .mvn/maven.config'
                pnpm -r exec 'bash' '-c' 'echo -ntp >> .mvn/maven.config'
                pnpm -r exec 'bash' '-c' 'echo -Xmx2g > .mvn/jvm.config'
                """.trim()
            }
        }

        stage("PNPM Bootstrap") {
            steps {
                sh """#!/bin/bash -el
                pnpm bootstrap
                """.trim()
            }
        }

        stage('Build FULL') {
            steps {
                sh """#!/bin/bash -el
                export WEBPACK__minimize="false"
                export WEBPACK__tsLoaderTranspileOnl="false"
                export KIE_TOOLS_BUILD__runLinters="true"
                export KIE_TOOLS_BUILD__runTests="true"
                export KIE_TOOLS_BUILD__runIntegrationTests="false"
                export KIE_TOOLS_BUILD__buildContainerImages="true"
                export KIE_TOOLS_BUILD__buildExamples="true"
                export KIE_TOOLS_BUILD__ignoreTestFailures="false"
                export KIE_TOOLS_BUILD__ignoreIntegrationTestFailures="false"
                export START_SERVER_AND_TEST_INSECURE="true"
                pnpm -r --workspace-concurrency=2 build:prod
                """.trim()
            }
        }
    }

    post {
        always {
            // Tests reports
            //junit 'packages/**/dist-tests/junit-report*.xml'
            //junit 'examples/**/dist-tests/junit-report*.xml'
            //junit 'packages/**/target/surefire-reports/TEST-*.xml'
            //junit 'examples/**/target/surefire-reports/TEST-*.xml'

            // Integration tests reports
            //junit 'packages/**/dist-it-tests/junit-report*.xml'
            //junit 'examples/**/dist-it-tests/junit-report*.xml'
            //junit 'packages/**/target/failsafe-reports/TEST-*.xml'
            //junit 'examples/**/target/failsafe-reports/TEST-*.xml'

            // Artifacts
            //archiveArtifacts artifacts: 'packages/**/dist', fingerprint: true

            // Clean workspace
            cleanWs(deleteDirs: true, disableDeferredWipeout: true)
        }
    }
}
