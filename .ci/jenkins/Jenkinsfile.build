/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

@Library('kie-tools-pipeline-lib')_

def agentLabels = buildUtils.apacheAgentLabels()

pipeline {
    agent {
        docker {
            label("${agentLabels}")
            image 'quay.io/kie-tools/kie-tools-ci-build:ubuntu'
            args '--shm-size=2g --privileged --group-add docker'
        }
    }

    options {
        skipDefaultCheckout()
        timeout(time: 360, unit: 'MINUTES')
    }

    environment {
        TESTS_REPORTS_PATTERNS = "kie-tools/packages/**/dist-tests/junit-report*.xml kie-tools/examples/**/dist-tests/junit-report*.xml kie-tools/packages/**/target/surefire-reports/TEST-*.xml kie-tools/examples/**/target/surefire-reports/TEST-*.xml"
        END_TO_END_TESTS_REPORTS_PATTERNS = "kie-tools/packages/**/dist-e2e-tests/junit-report*.xml kie-tools/examples/**/dist-e2e-tests/junit-report*.xml kie-tools/packages/**/target/failsafe-reports/TEST-*.xml kie-tools/examples/**/target/failsafe-reports/TEST-*.xml"
        END_TO_END_TESTS_ARTIFACTS_PATTERNS = "kie-tools/packages/**/dist-e2e-tests kie-tools/examples/**/dist-e2e-tests"
        BUILD_ARTIFACTS_PATTERNS = "kie-tools/packages/**/dist kie-tools/examples/**/dist"
    }

    stages {
        stage('Start required services for build and tests (DinD, Xvfb, Fluxbox)') {
            steps {
                script {
                    buildUtils.startRequiredServices()
                }
            }
        }

        stage('Clean workspace before build') {
            steps {
                cleanWs(deleteDirs: true, disableDeferredWipeout: true)
            }
        }

        stage('Checkout kie-tools') {
            steps {
                dir('kie-tools') {
                    script {
                        githubUtils.checkoutRepo(
                            "http://github.com/${pipelineVars.githubRepositorySlug}.git",
                            "${env.CHANGE_TARGET}",
                            "${pipelineVars.kieToolsBotGithubCredentialsId}"
                        )
                    }
                }
            }
        }

        stage('Merge PR Changes (squashed)') {
            steps {
                dir('kie-tools') {
                    script {
                        githubUtils.squashedMerge(
                            "${env.CHANGE_AUTHOR}",
                            "${env.CHANGE_BRANCH}",
                            "http://github.com/${env.CHANGE_AUTHOR}/${pipelineVars.githubRepositoryName}.git"
                        )
                    }
                }
            }
        }

        stage("Setup PNPM") {
            steps {
                dir('kie-tools') {
                    script {
                        buildUtils.setupPnpm()
                    }
                }
            }
        }

        stage("PNPM Bootstrap") {
            steps {
                dir('kie-tools') {
                    sh """#!/bin/bash -el
                    export PLAYWRIGHT_BASE__installDeps=true
                    pnpm bootstrap
                    """.trim()
                }
            }
        }

        stage('Build FULL') {
            steps {
                dir('kie-tools') {
                    sh """#!/bin/bash -el
                    export WEBPACK__minimize=false
                    export WEBPACK__tsLoaderTranspileOnl=false
                    export KIE_TOOLS_BUILD__runLinters=true
                    export KIE_TOOLS_BUILD__runTests=true
                    export KIE_TOOLS_BUILD__runEndToEndTests=true
                    export KIE_TOOLS_BUILD__buildContainerImages=true
                    export KIE_TOOLS_BUILD__buildExamples=true
                    export KIE_TOOLS_BUILD__ignoreTestFailures=false
                    export KIE_TOOLS_BUILD__ignoreEndToEndTestFailures=false
                    export START_SERVER_AND_TEST_INSECURE=true
                    export CYPRESS_VERIFY_TIMEOUT=100000
                    pnpm -r --workspace-concurrency=1 build:prod
                    """.trim()
                }
            }
        }

        stage('Zip artifacts') {
            steps {
                script {
                    sh "mkdir ${pipelineVars.defaultArtifactsTempDir}"
                    zipUtils.zipArtifact("${pipelineVars.defaultArtifactsTempDir}/build-artifacts.zip", "${env.BUILD_ARTIFACTS_PATTERNS}")
                    zipUtils.zipArtifact("${pipelineVars.defaultArtifactsTempDir}/tests-reports.zip", "${env.TESTS_REPORTS_PATTERNS}")
                    zipUtils.zipArtifact("${pipelineVars.defaultArtifactsTempDir}/end-to-end-tests-reports.zip", "${env.END_TO_END_TESTS_REPORTS_PATTERNS}")
                    zipUtils.zipArtifact("${pipelineVars.defaultArtifactsTempDir}/end-to-end-tests-artifacts.zip", "${env.END_TO_END_TESTS_ARTIFACTS_PATTERNS}")
                }
            }
        }

        stage('Prepare test reports for junit') {
            steps {
                script {
                    zipUtils.unzipArtifact("${pipelineVars.defaultArtifactsTempDir}/tests-reports.zip", "${pipelineVars.defaultArtifactsTempDir}/test-reports")
                    zipUtils.unzipArtifact("${pipelineVars.defaultArtifactsTempDir}/end-to-end-tests-reports.zip", "${pipelineVars.defaultArtifactsTempDir}/end-to-end-tests-reports")
                }
            }
        }
    }

    post {
        always {
            // Tests reports
            withChecks('Tests') {
                junit allowEmptyResults: true, testResults: "${pipelineVars.defaultArtifactsTempDir}/test-reports/**/junit-report*.xml"
            }

            // E2E Tests reports
            withChecks('E2E Tests') {
                junit allowEmptyResults: true, testResults: "${pipelineVars.defaultArtifactsTempDir}/end-to-end-tests-reports/**/junit-report*.xml"
            }

            // Artifacts
            archiveArtifacts artifacts: "${pipelineVars.defaultArtifactsTempDir}/build-artifacts.zip, ${pipelineVars.defaultArtifactsTempDir}/tests-reports.zip, ${pipelineVars.defaultArtifactsTempDir}/end-to-end-tests-reports.zip, ${pipelineVars.defaultArtifactsTempDir}/end-to-end-tests-artifacts.zip", fingerprint: true

            // Clean workspace
            cleanWs(deleteDirs: true, disableDeferredWipeout: true)
        }
    }
}
