/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
pipeline {
    agent {
        docker {
            image 'quay.io/kie-tools/kie-tools-ci-build:ubuntu'
            args '--shm-size=2g --entrypoint="" --privileged --group-add docker --group-add input --group-add render'
        }
    }

    options {
        skipDefaultCheckout()
        timeout(time: 300, unit: 'MINUTES')
    }

    environment {
        TESTS_REPORTS_PATTERNS = "packages/**/dist-tests/junit-report*.xml examples/**/dist-tests/junit-report*.xml packages/**/target/surefire-reports/TEST-*.xml examples/**/target/surefire-reports/TEST-*.xml"
        END_TO_END_TESTS_REPORTS_PATTERNS = "packages/**/dist-e2e-tests/junit-report*.xml examples/**/dist-e2e-tests/junit-report*.xml packages/**/target/failsafe-reports/TEST-*.xml examples/**/target/failsafe-reports/TEST-*.xml"
        END_TO_END_TESTS_ARTIFACTS_PATTERNS = "packages/**/dist-e2e-tests examples/**/dist-e2e-tests"
        BUILD_ARTIFACTS_PATTERNS = "packages/**/dist examples/**/dist"
    }

    stages {
        stage('Pre-check') {
            steps {
                sh """#!/bin/bash -el
                java --version
                mvn --version
                node --version
                go version
                pnpm --version
                """.trim()
            }
        }

        stage('Start Docker in Docker') {
            steps {
                sh """#!/bin/bash -el
                sudo entrypoint.sh
                sudo service dbus start
                """.trim()
            }
        }

        stage('Clean workspace before build') {
            steps {
                cleanWs(deleteDirs: true, disableDeferredWipeout: true)
            }
        }

        stage('Checkout kie-tools') {
            steps {
                checkout([$class: 'GitSCM',
                    branches: [[name: '${env.CHANGE_TARGET}']],
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [[$class: 'CleanCheckout']],
                    submoduleCfg: [],
                    userRemoteConfigs: [[credentialsId: 'kie-ci', url: "${env.GIT_URL}"]]
                ])
            }
        }

        stage('Setup global GIT user') {
            steps {
                sh """#!/bin/bash -el
                git config --global user.email "kietoolsbot@gmail.com"
                git config --global user.name "KIE Tools Bot (kiegroup)"
                """.trim()
            }
        }

        stage('Merge PR Changes squashed') {
            steps {
                sh """#!/bin/bash -el
                echo "Merge changes from ${env.CHANGE_AUTHOR}/${env.CHANGE_BRANCH}"
                git remote add ${env.CHANGE_AUTHOR} https://github.com/${env.CHANGE_AUTHOR}/kie-tools.git
                git fetch ${env.CHANGE_AUTHOR} ${env.CHANGE_BRANCH}

                echo "Before merging..."
                git log -n 1
                echo "base_sha=$(git rev-parse HEAD)"

                git merge --squash ${env.CHANGE_AUTHOR}/${env.CHANGE_BRANCH}
                git commit --no-edit

                echo "After merging..."
                git log -n 1
                echo "head_sha=$(git rev-parse HEAD)"
                "".trim()
            }
        }

        stage("Setup PNPM") {
            steps {
                sh """#!/bin/bash -el
                pnpm config set network-timeout 1000000
                pnpm -r exec 'bash' '-c' 'mkdir .mvn'
                pnpm -r exec 'bash' '-c' 'echo -B > .mvn/maven.config'
                pnpm -r exec 'bash' '-c' 'echo -ntp >> .mvn/maven.config'
                pnpm -r exec 'bash' '-c' 'echo -Xmx2g > .mvn/jvm.config'
                """.trim()
            }
        }

        stage("PNPM Bootstrap") {
            steps {
                sh """#!/bin/bash -el
                export PLAYWRIGHT_BASE__installDeps=true
                pnpm bootstrap
                """.trim()
            }
        }

        stage('Start Xvfb and Fluxbox') {
            steps {
                sh """#!/bin/bash -el
                Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
                fluxbox -display :99 > /dev/null 2>&1 &
                """.trim()
            }
        }

        stage('Build FULL') {
            steps {
                sh """#!/bin/bash -el
                export WEBPACK__minimize=false
                export WEBPACK__tsLoaderTranspileOnl=false
                export KIE_TOOLS_BUILD__runLinters=true
                export KIE_TOOLS_BUILD__runTests=true
                export KIE_TOOLS_BUILD__runEndToEndTests=true
                export KIE_TOOLS_BUILD__buildContainerImages=true
                export KIE_TOOLS_BUILD__buildExamples=true
                export KIE_TOOLS_BUILD__ignoreTestFailures=false
                export KIE_TOOLS_BUILD__ignoreEndToEndTestFailures=false
                export START_SERVER_AND_TEST_INSECURE=true
                pnpm -r --workspace-concurrency=1 build:prod
                """.trim()
            }
        }

        stage('Zip artifacts') {
            steps {
                sh """#!/bin/bash -el
                mkdir /tmp/artifacts
                output_empty_zip () { echo UEsFBgAAAAAAAAAAAAAAAAAAAAAAAA== | base64 -d; }
                zip -r /tmp/artifacts/build-artifacts.zip $BUILD_ARTIFACTS_PATTERNS || output_empty_zip > /tmp/artifacts/build-artifacts.zip
                zip -r /tmp/artifacts/tests-reports.zip $TESTS_REPORTS_PATTERNS || output_empty_zip > /tmp/artifacts/tests-reports.zip
                zip -r /tmp/artifacts/end-to-end-tests-reports.zip $END_TO_END_TESTS_REPORTS_PATTERNS || output_empty_zip > /tmp/artifacts/end-to-end-tests-reports.zip
                zip -r /tmp/artifacts/end-to-end-tests-artifacts.zip $END_TO_END_TESTS_ARTIFACTS_PATTERNS || output_empty_zip > /tmp/artifacts/end-to-end-tests-artifacts.zip
                """.trim()
            }
        }

        stage('Prepare test reports for junit') {
            steps {
                sh """#!/bin/bash -el
                unzip /tmp/artifacts/tests-reports.zip -d /tmp/artifacts/test-reports
                unzip /tmp/artifacts/end-to-end-tests-reports.zip -d /tmp/artifacts/end-to-end-tests-reports
                """.trim()
            }
        }
    }

    post {
        always {
            // Tests reports
            withChecks('Tests') {
                junit allowEmptyResults: true, testResults: '/tmp/artifacts/test-reports/**/junit-report*.xml'
            }

            // E2E Tests reports
            withChecks('E2E Tests') {
                junit allowEmptyResults: true, testResults: '/tmp/artifacts/end-to-end-tests-reports/**/junit-report*.xml'
            }

            // Artifacts
            archiveArtifacts artifacts: '/tmp/artifacts/build-artifacts.zip, /tmp/artifacts/tests-reports.zip, /tmp/artifacts/end-to-end-tests-reports.zip, /tmp/artifacts/end-to-end-tests-artifacts.zip', fingerprint: true

            // Clean workspace
            cleanWs(deleteDirs: true, disableDeferredWipeout: true)
        }
    }
}
