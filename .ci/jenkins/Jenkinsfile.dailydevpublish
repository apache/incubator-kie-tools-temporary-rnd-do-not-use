/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
pipeline {
    agent {
        docker {
            image 'quay.io/kie-tools/kie-tools-ci-build:ubuntu'
            args '--shm-size=2g --entrypoint="" --privileged --group-add docker --group-add input --group-add render'
        }
    }

    options {
        timeout(time: 240, unit: 'MINUTES')
    }

    environment {
        KIE_SANDBOX_EXTENDED_SERVICES_VERSION = "0.0.0"

        KIE_TOOLS_BUILD__buildContainerImages = "true"
        KIE_TOOLS_BUILD__runLinters = "false"
        KIE_TOOLS_BUILD__runTests = "false"
        KIE_TOOLS_BUILD__runEndToEndTests = "false"

        DMN_DEV_DEPLOYMENT_BASE_IMAGE__registry = "quay.io"
        DMN_DEV_DEPLOYMENT_BASE_IMAGE__account = "kie-tools"
        DMN_DEV_DEPLOYMENT_BASE_IMAGE__name = "dmn-dev-deployment-base-image"
        DMN_DEV_DEPLOYMENT_BASE_IMAGE__buildTags = "daily-dev"

        ONLINE_EDITOR__dmnDevDeploymentBaseImageRegistry = "quay.io"
        ONLINE_EDITOR__dmnDevDeploymentBaseImageAccount = "kie-tools"
        ONLINE_EDITOR__dmnDevDeploymentBaseImageName = "dmn-dev-deployment-base-image"
        ONLINE_EDITOR__dmnDevDeploymentBaseImageTag = "daily-dev"
        ONLINE_EDITOR__corsProxyUrl = "https://daily-dev-cors-proxy-kie-sandbox.rhba-0ad6762cc85bcef5745bb684498c2436-0000.us-south.containers.appdomain.cloud"

        EXTENDED_SERVICES__kieSandboxUrl = "https://kiegroup.github.io/kogito-online/dev"

        KIE_SANDBOX__imageRegistry = "quay.io"
        KIE_SANDBOX__imageAccount = "kie-tools"
        KIE_SANDBOX__imageName = "kie-sandbox-image"
        KIE_SANDBOX__imageBuildTags = "daily-dev"

        KIE_SANDBOX_EXTENDED_SERVICES__imageRegistry = "quay.io"
        KIE_SANDBOX_EXTENDED_SERVICES__imageAccount = "kie-tools"
        KIE_SANDBOX_EXTENDED_SERVICES__imageName = "kie-sandbox-extended-services-image"
        KIE_SANDBOX_EXTENDED_SERVICES__imageBuildTags = "daily-dev"

        CORS_PROXY_IMAGE__imageRegistry = "quay.io"
        CORS_PROXY_IMAGE__imageAccount = "kie-tools"
        CORS_PROXY_IMAGE__imageName = "cors-proxy-image"
        CORS_PROXY_IMAGE__imageBuildTags = "daily-dev"

        OPENSHIFT_NAMESPACE = "kie-sandbox"
        OPENSHIFT_PART_OF = "daily-dev-kie-sandbox-app"
        DEPLOY_TAG = "daily-dev"

        DASHBUILDER__viewerImageRegistry = "quay.io"
        DASHBUILDER__viewerImageAccount = "kie-tools"
        DASHBUILDER__viewerImageName = "dashbuilder-viewer-image"
        DASHBUILDER__viewerImageBuildTags = "daily-dev"

        SERVERLESS_LOGIC_WEB_TOOLS__dashbuilderViewerImageTag = "daily-dev"
        SERVERLESS_LOGIC_WEB_TOOLS__swfBuilderImageRegistry = "quay.io"
        SERVERLESS_LOGIC_WEB_TOOLS__swfBuilderImageAccount = "kie-tools"
        SERVERLESS_LOGIC_WEB_TOOLS__swfBuilderImageName = "serverless-logic-web-tools-swf-builder-image"
        SERVERLESS_LOGIC_WEB_TOOLS__swfBuilderImageTag = "daily-dev"
        SERVERLESS_LOGIC_WEB_TOOLS__swfBuilderImageBuildTags = "daily-dev"
        SERVERLESS_LOGIC_WEB_TOOLS__baseBuilderImageRegistry = "quay.io"
        SERVERLESS_LOGIC_WEB_TOOLS__baseBuilderImageAccount = "kie-tools"
        SERVERLESS_LOGIC_WEB_TOOLS__baseBuilderImageName = "serverless-logic-web-tools-base-builder-image"
        SERVERLESS_LOGIC_WEB_TOOLS__baseBuilderImageTag = "daily-dev"
        SERVERLESS_LOGIC_WEB_TOOLS__baseBuilderImageBuildTags = "daily-dev"
        SERVERLESS_LOGIC_WEB_TOOLS__swfDevModeImageRegistry = "quay.io"
        SERVERLESS_LOGIC_WEB_TOOLS__swfDevModeImageAccount = "kie-tools"
        SERVERLESS_LOGIC_WEB_TOOLS__swfDevModeImageName = "serverless-logic-web-tools-swf-dev-mode-image"
        SERVERLESS_LOGIC_WEB_TOOLS__swfDevModeImageTag = "daily-dev"
        SERVERLESS_LOGIC_WEB_TOOLS__swfDevModeImageBuildTags = "daily-dev"
        SERVERLESS_LOGIC_WEB_TOOLS__corsProxyUrl = "https://daily-dev-cors-proxy-kie-sandbox.rhba-0ad6762cc85bcef5745bb684498c2436-0000.us-south.containers.appdomain.cloud"

        KIE_TOOLS_QUAY_IO_CREDENTIALS_ID = "quay-io-kie-tools-token"

        ARTIFACTS_TMP_DIR = "artifacts"

        BUILD_DATE = sh(script: "echo `date +'%Y-%m-%d %T'`", returnStdout: true).trim()
    }

    stages {
        stage('Pre-check') {
            steps {
                sh """#!/bin/bash -el
                java --version
                mvn --version
                node --version
                go version
                pnpm --version
                """.trim()
            }
        }

        stage('Start Docker in Docker') {
            steps {
                sh """#!/bin/bash -el
                sudo entrypoint.sh
                sudo service dbus start
                """.trim()
            }
        }

        stage('Start Xvfb and Fluxbox') {
            steps {
                sh """#!/bin/bash -el
                Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
                fluxbox -display :99 > /dev/null 2>&1 &
                """.trim()
            }
        }

        stage('Clean workspace before build') {
            steps {
                cleanWs(deleteDirs: true, disableDeferredWipeout: true)
            }
        }

        stage('Checkout kie-tools') {
            steps {
                dir('kie-tools') {
                    checkout scm
                }
            }
        }

        stage('Output version') {
            steps {
                dir('kie-tools') {
                    script {
                        env.VERSION = sh(returnStdout: true, script: "#!/bin/bash -el \n node -e \"console.log(require('./package.json').version);\"").trim()
                    }
                }
            }
        }

        stage("Setup PNPM") {
            steps {
                dir('kie-tools') {
                    sh """#!/bin/bash -el
                    env
                    pnpm config set network-timeout 1000000
                    pnpm -r exec 'bash' '-c' 'mkdir .mvn'
                    pnpm -r exec 'bash' '-c' 'echo -B > .mvn/maven.config'
                    pnpm -r exec 'bash' '-c' 'echo -ntp >> .mvn/maven.config'
                    pnpm -r exec 'bash' '-c' 'echo -Xmx2g > .mvn/jvm.config'
                    pnpm -F *-image exec sed -i 's/\\("build:prod.*".*\\)podman:build\\(.*\\)/\\1docker:build\\2/g' package.json
                    """.trim()
                }
            }
        }

        stage("PNPM Bootstrap") {
            steps {
                dir('kie-tools') {
                    sh """#!/bin/bash -el
                    pnpm bootstrap
                    """.trim()
                }
            }
        }

        stage('Build') {
            steps {
                dir('kie-tools') {
                    sh """#!/bin/bash -el
                    export WEBPACK__minimize=true
                    export WEBPACK__tsLoaderTranspileOnly=false
                    export CHROME_EXTENSION__routerTargetOrigin=https://kiegroup.github.io
                    export CHROME_EXTENSION__routerRelativePath=kogito-online/dev/editors/
                    export SWF_CHROME_EXTENSION__routerTargetOrigin=https://kiegroup.github.io
                    export SWF_CHROME_EXTENSION__routerRelativePath=kogito-online/dev/editors/
                    export ONLINE_EDITOR__extendedServicesDownloadUrlLinux=https://github.com/kiegroup/kie-tools/releases/download/${env.KIE_SANDBOX_EXTENDED_SERVICES_VERSION}/kie_sandbox_extended_services_linux_${env.KIE_SANDBOX_EXTENDED_SERVICES_VERSION}.tar.gz
                    export ONLINE_EDITOR__extendedServicesDownloadUrlMacOs=https://github.com/kiegroup/kie-tools/releases/download/${env.KIE_SANDBOX_EXTENDED_SERVICES_VERSION}/kie_sandbox_extended_services_macos_${env.KIE_SANDBOX_EXTENDED_SERVICES_VERSION}.dmg
                    export ONLINE_EDITOR__extendedServicesDownloadUrlWindows=https://github.com/kiegroup/kie-tools/releases/download/${env.KIE_SANDBOX_EXTENDED_SERVICES_VERSION}/kie_sandbox_extended_services_windows_${env.KIE_SANDBOX_EXTENDED_SERVICES_VERSION}.exe
                    export ONLINE_EDITOR__extendedServicesCompatibleVersion=${env.KIE_SANDBOX_EXTENDED_SERVICES_VERSION}
                    export ONLINE_EDITOR__buildInfo="${env.VERSION} (daily-dev) @ ${env.GIT_COMMIT} (${env.BUILD_DATE})"
                    export SERVERLESS_LOGIC_WEB_TOOLS__buildInfo="${env.VERSION} (daily-dev) @ ${env.GIT_COMMIT} (${env.BUILD_DATE})"
                    pnpm -r --workspace-concurrency=1 build:prod
                    """.trim()
                }
            }
        }

        stage('Push dmn-dev-deployment-base-image to quay.io') {
            steps {
                script {
                    pushImageToRegistry(
                        "${env.DMN_DEV_DEPLOYMENT_BASE_IMAGE__registry}/${env.DMN_DEV_DEPLOYMENT_BASE_IMAGE__account}",
                        "${env.DMN_DEV_DEPLOYMENT_BASE_IMAGE__account}",
                        "${env.DMN_DEV_DEPLOYMENT_BASE_IMAGE__name}",
                        "${env.DMN_DEV_DEPLOYMENT_BASE_IMAGE__buildTags}",
                        "${env.KIE_TOOLS_QUAY_IO_CREDENTIALS_ID}"
                    )
                }
            }
        }

        stage('Push kie-sandbox-extended-services-image to quay.io') {
            steps {
                script {
                    pushImageToRegistry(
                        "${env.KIE_SANDBOX_EXTENDED_SERVICES__imageRegistry}/${env.KIE_SANDBOX_EXTENDED_SERVICES__imageAccount}",
                        "${env.KIE_SANDBOX_EXTENDED_SERVICES__imageAccount}",
                        "${env.KIE_SANDBOX_EXTENDED_SERVICES__imageName}",
                        "${env.KIE_SANDBOX_EXTENDED_SERVICES__imageBuildTags}",
                        "${env.KIE_TOOLS_QUAY_IO_CREDENTIALS_ID}"
                    )
                }
            }
        }

        stage('Deploy kie-sandbox-extended-services-image to OpenShift') {
            steps {
                script {
                    env.KIE_SANDBOX_EXTENDED_SERVICES_URL = createOrUpdateOpenshiftApp(
                        "daily-dev-kie-sandbox-extended-services",
                        "${env.DEPLOY_TAG}",
                        "${env.KIE_SANDBOX_EXTENDED_SERVICES__imageRegistry}/${env.KIE_SANDBOX_EXTENDED_SERVICES__imageAccount}/${env.KIE_SANDBOX_EXTENDED_SERVICES__imageName}:${env.DEPLOY_TAG}",
                        "${env.OPENSHIFT_PART_OF}",
                        "golang"
                    )
                }
            }
        }

        stage('Push cors-proxy-image to quay.io') {
            steps {
                script {
                    pushImageToRegistry(
                        "${env.CORS_PROXY_IMAGE__imageRegistry}/${env.CORS_PROXY_IMAGE__imageAccount}",
                        "${env.CORS_PROXY_IMAGE__imageAccount}",
                        "${env.CORS_PROXY_IMAGE__imageName}",
                        "${env.CORS_PROXY_IMAGE__imageBuildTags}",
                        "${env.KIE_TOOLS_QUAY_IO_CREDENTIALS_ID}"
                    )
                }
            }
        }

        stage('Deploy cors-proxy-image to OpenShift') {
            steps {
                script {
                    env.KIE_SANDBOX_CORS_PROXY_URL = createOrUpdateOpenshiftApp(
                        "daily-dev-cors-proxy",
                        "${env.DEPLOY_TAG}",
                        "${env.CORS_PROXY_IMAGE__imageRegistry}/${env.CORS_PROXY_IMAGE__imageAccount}/${env.CORS_PROXY_IMAGE__imageName}:${env.DEPLOY_TAG}",
                        "${env.OPENSHIFT_PART_OF}",
                        "nodejs"
                    )
                }
            }
        }

        stage('Push kie-sandbox-image to quay.io') {
            steps {
                script {
                    pushImageToRegistry(
                        "${env.KIE_SANDBOX__imageRegistry}/${env.KIE_SANDBOX__imageAccount}",
                        "${env.KIE_SANDBOX__imageAccount}",
                        "${env.KIE_SANDBOX__imageName}",
                        "${env.KIE_SANDBOX__imageBuildTags}",
                        "${env.KIE_TOOLS_QUAY_IO_CREDENTIALS_ID}"
                    )
                }
            }
        }

        stage('Prepare environment variables for OpenShift deployment') {
            steps {
                sh """#!/bin/bash -el
                echo "KIE_SANDBOX_EXTENDED_SERVICES_URL=${env.KIE_SANDBOX_EXTENDED_SERVICES_URL}" >> deployment.env
                echo "KIE_SANDBOX_CORS_PROXY_URL=${env.KIE_SANDBOX_CORS_PROXY_URL}" >> deployment.env
                """.trim()
            }
        }

        stage('Deploy kie-sandbox-image to OpenShift') {
            steps {
                script {
                    createOrUpdateOpenshiftApp(
                        "daily-dev-kie-sandbox",
                        "${env.DEPLOY_TAG}",
                        "${env.KIE_SANDBOX__imageRegistry}/${env.KIE_SANDBOX__imageAccount}/${env.KIE_SANDBOX__imageName}:${env.DEPLOY_TAG}",
                        "${env.OPENSHIFT_PART_OF}",
                        "js",
                        "./deployment.env"
                    )
                }
            }
        }

        stage('Push serverless-logic-web-tools-swf-builder-image to quay.io') {
            steps {
                script {
                    pushImageToRegistry(
                        "${env.SERVERLESS_LOGIC_WEB_TOOLS__swfBuilderImageRegistry}/${env.SERVERLESS_LOGIC_WEB_TOOLS__swfBuilderImageAccount}",
                        "${env.SERVERLESS_LOGIC_WEB_TOOLS__swfBuilderImageAccount}",
                        "${env.SERVERLESS_LOGIC_WEB_TOOLS__swfBuilderImageName}",
                        "${env.SERVERLESS_LOGIC_WEB_TOOLS__swfBuilderImageBuildTags}",
                        "${env.KIE_TOOLS_QUAY_IO_CREDENTIALS_ID}"
                    )
                }
            }
        }

        stage('Push serverless-logic-web-tools-base-builder-image to quay.io') {
            steps {
                script {
                    pushImageToRegistry(
                        "${env.SERVERLESS_LOGIC_WEB_TOOLS__baseBuilderImageRegistry}/${env.SERVERLESS_LOGIC_WEB_TOOLS__baseBuilderImageAccount}",
                        "${env.SERVERLESS_LOGIC_WEB_TOOLS__baseBuilderImageAccount}",
                        "${env.SERVERLESS_LOGIC_WEB_TOOLS__baseBuilderImageName}",
                        "${env.SERVERLESS_LOGIC_WEB_TOOLS__baseBuilderImageBuildTags}",
                        "${env.KIE_TOOLS_QUAY_IO_CREDENTIALS_ID}"
                    )
                }
            }
        }

        stage('Push serverless-logic-web-tools-swf-dev-mode-image to quay.io') {
            steps {
                script {
                    pushImageToRegistry(
                        "${env.SERVERLESS_LOGIC_WEB_TOOLS__swfDevModeImageRegistry}/${env.SERVERLESS_LOGIC_WEB_TOOLS__swfDevModeImageAccount}",
                        "${env.SERVERLESS_LOGIC_WEB_TOOLS__swfDevModeImageAccount}",
                        "${env.SERVERLESS_LOGIC_WEB_TOOLS__swfDevModeImageName}",
                        "${env.SERVERLESS_LOGIC_WEB_TOOLS__swfDevModeImageBuildTags}",
                        "${env.KIE_TOOLS_QUAY_IO_CREDENTIALS_ID}"
                    )
                }
            }
        }

        stage('Push dashbuilder-viewer-image to quay.io') {
            steps {
                script {
                    pushImageToRegistry(
                        "${env.DASHBUILDER__viewerImageRegistry}/${env.DASHBUILDER__viewerImageAccount}",
                        "${env.DASHBUILDER__viewerImageAccount}",
                        "${env.DASHBUILDER__viewerImageName}",
                        "${env.DASHBUILDER__viewerImageBuildTags}",
                        "${env.KIE_TOOLS_QUAY_IO_CREDENTIALS_ID}"
                    )
                }
            }
        }

        stage('Update kogito-online resources') {
            steps {
                dir('kogito-online') {
                    sh """#!/bin/bash -el
                    git config --global user.email 'kietoolsbot@gmail.com'
                    git config --global user.name 'KIE Tools Bot (kiegroup)'
                    """.trim()

                    checkout([$class: 'GitSCM',
                        branches: [[name: 'gh-pages']],
                        doGenerateSubmoduleConfigurations: false,
                        extensions: [[$class: 'CloneOption', noTags: false, reference: '', shallow: false]],
                        submoduleCfg: [],
                        userRemoteConfigs: [[credentialsId: 'kie-tools-bot-gh', url: 'https://github.com/kiegroup/kogito-online.git']]
                    ])

                    sh """#!/bin/bash -el
                    git checkout gh-pages
                    rm -rf dev && mkdir -p dev/editors
                    cp -RL ../kie-tools/packages/stunner-editors/dist/dmn dev/editors/
                    cp -RL ../kie-tools/packages/stunner-editors/dist/bpmn dev/editors/
                    cp -RL ../kie-tools/packages/stunner-editors/dist/scesim dev/editors/
                    cp -r ../kie-tools/packages/online-editor/dist/* dev/
                    rm -rf dev/gwt-editors
                    ln -s editors dev/gwt-editors
                    git add . && git commit -m "KIE Tools Daily Dev Build resources - ${env.BUILD_DATE}" || echo 'No changes.'
                    """.trim()

                    withCredentials([usernamePassword(credentialsId: 'kie-tools-bot-gh', usernameVariable: 'GH_USER', passwordVariable: 'GH_PASSWORD')]) {
                        sh('set +x && git push https://$GH_USER:$GH_PASSWORD@github.com/kiegroup/kogito-online.git gh-pages')
                    }
                }
            }
        }

        stage('Update serverless-logic-sandbox-deployment') {
            steps {
                dir('serverless-logic-sandbox-deployment') {
                    sh """#!/bin/bash -el
                    git config --global user.email 'kietoolsbot@gmail.com'
                    git config --global user.name 'KIE Tools Bot (kiegroup)'
                    """.trim()

                    checkout([$class: 'GitSCM',
                        branches: [[name: 'gh-pages']],
                        doGenerateSubmoduleConfigurations: false,
                        extensions: [[$class: 'CloneOption', noTags: false, reference: '', shallow: false]],
                        submoduleCfg: [],
                        userRemoteConfigs: [[credentialsId: 'kie-tools-bot-gh', url: 'https://github.com/kiegroup/serverless-logic-sandbox-deployment.git']]
                    ])

                    sh """#!/bin/bash -el
                    git checkout gh-pages
                    rm -rf dev && mkdir dev
                    cp -r ../kie-tools/packages/serverless-logic-web-tools/dist/* dev/
                    git add . && git commit -m "KIE Tools Daily Dev Build resources - ${env.BUILD_DATE}" || echo 'No changes.'
                    """.trim()

                    withCredentials([usernamePassword(credentialsId: 'kie-tools-bot-gh', usernameVariable: 'GH_USER', passwordVariable: 'GH_PASSWORD')]) {
                        sh('set +x && git push https://$GH_USER:$GH_PASSWORD@github.com/kiegroup/serverless-logic-sandbox-deployment.git gh-pages')
                    }
                }
            }
        }
    }

    post {
        always {
            // Artifacts
            archiveArtifacts artifacts: "kie-tools/packages/serverless-workflow-vscode-extension/dist/serverless_workflow_vscode_extension_${env.VERSION}.vsix, kie-tools/packages/vscode-extension-dashbuilder-editor/dist/vscode_extension_dashbuilder_editor_${env.VERSION}.vsix, kie-tools/packages/kie-editors-dev-vscode-extension/dist/kie_editors_dev_vscode_extension_${env.VERSION}.vsix, kie-tools/packages/chrome-extension-pack-kogito-kie-editors/dist/chrome_extension_kogito_kie_editors_${env.VERSION}.zip, kie-tools/packages/chrome-extension-serverless-workflow-editor/dist/chrome_extension_serverless_workflow_editor_${env.VERSION}.zip"

            // Clean workspace
            cleanWs(deleteDirs: true, disableDeferredWipeout: true)
        }
    }
}

def pushImageToRegistry(String registry, String account, String image, String tag, String credentialsId) {
    withCredentials([usernamePassword(credentialsId: credentialsId, usernameVariable: 'REGISTRY_USER', passwordVariable: 'REGISTRY_PWD')]) {
        sh "set +x && docker login -u $REGISTRY_USER -p $REGISTRY_PWD $registry"
        sh "docker push $registry/$image:$tag"
        sh "docker logout"
    }
}

def createOrUpdateOpenshiftApp(String appName, String imageTag, String imageUrl, String partOf, String deploymentIcon, String deploymentEnvVarsPath="./deployment.env") {
    withCredentials([usernamePassword(credentialsId: 'openshift-kie-tools-token', usernameVariable: 'OS_SERVER', passwordVariable: 'OS_TOKEN')]) {
        sh "set +x && oc login --token=$OS_TOKEN --server=$OS_SERVER --insecure-skip-tls-verify"
        sh """#!/bin/bash -el
        if [ ! -f ${deploymentEnvVarsPath} ]; then
          echo "ENV file does not exist"
          touch ${deploymentEnvVarsPath}
        fi

        if ! oc get deploy ${appName} > /dev/null 2>&1; then
          echo "Create the app '${appName}'"

          oc create imagestream ${appName}
          oc import-image ${appName}:${imageTag} --from=${imageUrl} --confirm
          oc tag ${appName}:${imageTag} ${appName}:latest

          oc label imagestreams/${appName} app=${appName}
          oc label imagestreams/${appName} app.kubernetes.io/component=${appName}
          oc label imagestreams/${appName} app.kubernetes.io/instance=${appName}
          oc label imagestreams/${appName} app.kubernetes.io/part-of=${partOf}

          oc new-app ${appName}:latest --name=${appName} --env-file=${deploymentEnvVarsPath}
          oc create route edge --service=${appName}

          oc label services/${appName} app.kubernetes.io/part-of=${partOf}
          oc label routes/${appName} app.kubernetes.io/part-of=${partOf}
          oc label deployments/${appName} app.kubernetes.io/part-of=${partOf}
          oc label deployments/${appName} app.openshift.io/runtime=${deploymentIcon}
        else
          echo "App '${appName}' already exists. Update the ImageStream instead."
          oc tag -d ${appName}:latest
          oc import-image ${appName}:${imageTag} --from=${imageUrl} --confirm
          oc tag ${appName}:${imageTag} ${appName}:latest
          cat ${deploymentEnvVarsPath} | oc set env deploy/${appName} -
        fi
        """.trim()

        route = sh(returnStdout: true, script: "oc get route ${appName} -o jsonpath='{.spec.host}'").trim()

        sh "oc logout"

        return "https://${route}"
    }
}
