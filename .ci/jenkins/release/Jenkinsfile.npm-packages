/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

@Library('kie-tools-pipeline-lib')_

pipeline {
    agent {
        docker {
            image 'quay.io/kie-tools/kie-tools-ci-build:ubuntu'
            args '--shm-size=2g --privileged --group-add docker'
        }
    }

    options {
        timeout(time: 60, unit: 'MINUTES')
    }

    parameters {
        booleanParam(description: 'Dry run', name: 'DRY_RUN', defaultValue: true)
        string(description: 'Tag', name: 'TAG', defaultValue: '0.0.0')
        string(description: 'Base Ref', name: 'BASE_REF')
        string(description: 'Upload Asset Url', name: 'UPLOAD_ASSET_URL')
    }

    environment {
        KIE_TOOLS_BUILD__runLinters = 'false'
        KIE_TOOLS_BUILD__runTests = 'false'
        KIE_TOOLS_BUILD__runEndToEndTests = 'false'
        KIE_TOOLS_BUILD__buildContainerImages = 'true'
    }

    stages {
        stage('Start required services for build and tests (DinD, Xvfb, Fluxbox)') {
            steps {
                script {
                    buildUtils.startRequiredServices()
                }
            }
        }

        stage('Clean workspace before build') {
            steps {
                cleanWs(deleteDirs: true, disableDeferredWipeout: true)
            }
        }

        stage('Checkout kie-tools') {
            steps {
                script {
                    githubUtils.checkoutRepo(
                        "http://github.com/${pipelineVars.githubRepositorySlug}.git",
                        "${params.BASE_REF}",
                        "${pipelineVars.kieToolsBotGithubCredentialsId}"
                    )
                }
            }
        }

        stage('Setup PNPM') {
            steps {
                script {
                    buildUtils.setupPnpm()
                }
            }
        }

        stage('Create PNPM filter for building') {
            steps {
                script {
                    pnpmFilter = sh(returnStdout: true, script: "#!/bin/bash -el \n pnpm -r exec 'bash' '-c' 'PKG_NAME=\$(jq -r \".name\" package.json) PKG_IS_PVT=\$(jq -r \".private\" package.json); if [ \"$PKG_IS_PVT\" != \"true\" ]; then echo \"-F $PKG_NAME...\"; fi'").trim()
                    sh """
                    echo ${pnpmFilter}
                    echo 'filter<<EOF' >> .filterPnpmString
                    echo ${pnpmFilter} >> .filterPnpmString
                    echo 'EOF' >> .filterPnpmString
                    """.trim()
                    env.PNPM_FILTER_STRING_FOR_BUILDING = sh(returnStdout: true, script: 'cat .filterPnpmString')
                }
            }
        }

        stage('PNPM Bootstrap') {
            steps {
                buildUtils.bootstrapPnpm("${env.PNPM_FILTER_STRING_FOR_BUILDING}")
            }
        }

        stage('Build') {
            steps {
                sh """#!/bin/bash -el
                pnpm ${env.PNPM_FILTER_STRING_FOR_BUILDING} build:prod
                """.trim()
            }
        }

        stage('Publish packages to the NPM registry') {
            when {
                expression { !params.DRY_RUN }
            }
            steps {
                withCredentials([string(credentialsId: "${pipelineVars.npmTokenCredentialsId}", variable: 'NPM_TOKEN')]) {
                    sh """#!/bin/bash -el
                    echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
                    export PNPM_FILTER_STRING_FOR_PUBLISHING=\$(pnpm -r exec 'bash' '-c' 'PKG_NAME=\$(jq -r ".name" package.json) PKG_IS_PVT=\$(jq -r ".private" package.json); if [ "$PKG_IS_PVT" != "true" ]; then echo "-F $PKG_NAME"; fi')
                    echo $PNPM_FILTER_STRING_FOR_PUBLISHING
                    pnpm $PNPM_FILTER_STRING_FOR_PUBLISHING exec 'bash' '-c' 'PKG_NAME=\$(jq -r ".name" package.json); NPM_PKG_INFO=\$(npm view $PKG_NAME@${params.TAG} name || echo ""); if [ -z $NPM_PKG_INFO ]; then pnpm publish --no-git-checks --access public; fi'
                    """.trim()
                }
            }
        }
    }

    post {
        always {
            cleanWs(deleteDirs: true, disableDeferredWipeout: true)
        }
    }
}
